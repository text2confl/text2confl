package com.github.zeldigas.text2confl.cli.config

import com.github.zeldigas.text2confl.convert.confluence.LanguageMapper
import com.github.zeldigas.text2confl.convert.markdown.MarkdownConfiguration
import io.ktor.http.*
import java.nio.file.Path

enum class EditorVersion {
    V1, V2
}

data class ConverterConfig(
    val titlePrefix: String,
    val titlePostfix: String,
    val editorVersion: EditorVersion,
    val addAutogeneratedNote: Boolean?,
    val docsLocation: String?,
    val autogeneratedNote: String?,
    val markdownConfig: MarkdownConfiguration
) {
    val languageMapper: LanguageMapper
        get () = when(editorVersion) {
            EditorVersion.V1 -> LanguageMapper.forServer()
            EditorVersion.V2 -> LanguageMapper.forCloud()
        }

    val titleConverter: (Path, String) -> String
        get() = { _, title -> "$titlePrefix${title}${titlePostfix}"}
}

internal fun createConversionConfig(directoryConfig: DirectoryConfig, editorVersion: EditorVersion?, server: Url?): ConverterConfig {
    val selectedVersion = editorVersion ?: directoryConfig.editorVersion
    return ConverterConfig(
        titlePrefix = directoryConfig.titlePrefix,
        titlePostfix = directoryConfig.titlePostfix,
        editorVersion = selectedVersion ?: inferFromUrl(server),
        addAutogeneratedNote = directoryConfig.addAutogeneratedNote,
        docsLocation = directoryConfig.docsLocation,
        autogeneratedNote = directoryConfig.autogeneratedNote,
        markdownConfig = directoryConfig.markdown.toConfig()
    )
}

private fun inferFromUrl(server: Url?): EditorVersion {
    return if (server?.host?.endsWith(".atlassian.net", ignoreCase = true) == true) {
        EditorVersion.V2
    } else {
        EditorVersion.V1
    }
}
