package com.github.zeldigas.text2confl.cli.config

import com.fasterxml.jackson.databind.PropertyNamingStrategies
import com.fasterxml.jackson.databind.annotation.JsonNaming
import com.github.zeldigas.text2confl.cli.upload.ChangeDetector
import com.github.zeldigas.text2confl.convert.markdown.*
import java.nio.file.Path
import kotlin.io.path.Path
import kotlin.io.path.createTempDirectory
import kotlin.io.path.div

/**
 * Holder of data that can be put to `.text2confl.yml` configuration file that is located in root directory of directory structure
 */
@JsonNaming(value = PropertyNamingStrategies.KebabCaseStrategy::class)
data class DirectoryConfig(
    val server: String? = null,
    val skipSsl: Boolean = false,
    val space: String? = null,
    val defaultParentId: String? = null,
    val defaultParent: String? = null,
    val removeOrphans: Cleanup = Cleanup.Managed,
    val notifyWatchers: Boolean = true,
    val titlePrefix: String = "",
    val titlePostfix: String = "",
    val editorVersion: EditorVersion? = null,
    val modificationCheck: ChangeDetector = ChangeDetector.HASH,
    val docsLocation: String? = null,
    val addAutogeneratedNote: Boolean? = null,
    val autogeneratedNote: String? = null,
    val codeBlocks: CodeBlockParams = CodeBlockParams(),
    val markdown: MarkdownParams = MarkdownParams()
) {
    lateinit var docsDir: Path
}

data class CodeBlockParams(
    val defaultLanguage: String? = null,
    val extraMapping: Map<String, String> = emptyMap()
)

data class MarkdownParams(
    val anyMacro: Boolean? = null,
    val enabledMacros: List<String> = emptyList(),
    val emoji: Boolean = true,
    val diagrams: MarkdownDiagramParameters = MarkdownDiagramParameters(),
    val autoLinks: Boolean = true,
    val tables: TablesConfiguration = TablesConfiguration(),
    val typography: TypographyConfiguration = TypographyConfiguration()
) {
    fun toConfig(docsDir: Path): MarkdownConfiguration {
        val any = anyMacro ?: enabledMacros.isEmpty()
        return MarkdownConfiguration(any, supportedMacros = enabledMacros,
            emoji=emoji,
            diagrams=diagrams.toConfig(docsDir),
            tables = tables,
            autoLinks = autoLinks,
            typography=typography
        )
    }
}

data class MarkdownDiagramParameters(
    val tempDir: Boolean = false,
    val baseDir: String = ".diagrams",
    val mermaid: MermaidDiagramsConfiguration = MermaidDiagramsConfiguration(),
    val plantuml: PlantUmlDiagramsConfiguration = PlantUmlDiagramsConfiguration()
) {

    fun toConfig(docsDir: Path): DiagramsConfiguration {
        val baseDir = if (tempDir) createTempDirectory() else docsDir / baseDir
        return DiagramsConfiguration(diagramsBaseDir = baseDir,
            mermaid = mermaid.copy(
                configFile = mermaid.configFile?.relativeTo(docsDir),
                cssFile = mermaid.cssFile?.relativeTo(docsDir),
                puppeeterConfig = mermaid.puppeeterConfig?.relativeTo(docsDir)
            ),
            plantuml = plantuml
        )
    }

    private fun String.relativeTo(base: Path) : String = base.resolve(Path(this)).toString()

}